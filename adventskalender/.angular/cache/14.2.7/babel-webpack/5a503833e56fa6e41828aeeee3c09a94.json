{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport { NoErrorHttpParams } from \"../_helpers/noErrorHttpParams\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/alert.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(toastService) {\n      this.toastService = toastService;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(retry(1), catchError(error => {\n        var _a; // eslint-disable-next-line no-console\n\n\n        console.log(error);\n        const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || error.message || \"unknown error!\"; // when using { params: new NoErrorToastHttpParams(true) }, don't show toast\n\n        if (!(request.params instanceof NoErrorHttpParams && request.params.dontShowAlert)) {\n          this.toastService.error(errorMessage);\n        }\n\n        return throwError(error.error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}