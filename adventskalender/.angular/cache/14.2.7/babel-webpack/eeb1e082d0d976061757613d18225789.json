{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../_services/remote.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\n\nfunction TasksComponent_td_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r2 = ctx.$implicit;\n    i0.ɵɵclassProp(\"text-white\", task_r2.status == \"SOLVED\")(\"bg-success\", task_r2.status == \"SOLVED\" && task_r2.solutionStatus == \"CORRECT\")(\"bg-danger\", task_r2.status == \"SOLVED\" && task_r2.solutionStatus == \"INCORRECT\")(\"bg-warning\", task_r2.status == \"OPEN\")(\"bg-light\", task_r2.status == \"LOCKED\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(task_r2.day);\n  }\n}\n\nfunction TasksComponent_div_23_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 16);\n  }\n}\n\nfunction TasksComponent_div_23_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 17);\n  }\n}\n\nconst _c0 = function (a1) {\n  return [\"/tasks\", a1];\n};\n\nfunction TasksComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"a\", 11);\n    i0.ɵɵtemplate(2, TasksComponent_div_23_i_2_Template, 1, 0, \"i\", 12);\n    i0.ɵɵtemplate(3, TasksComponent_div_23_i_3_Template, 1, 0, \"i\", 13);\n    i0.ɵɵelement(4, \"img\", 14);\n    i0.ɵɵelementStart(5, \"p\", 15);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const task_r3 = ctx.$implicit;\n    i0.ɵɵclassProp(\"cursor-normal\", task_r3.status == \"LOCKED\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"cursor-normal\", task_r3.status == \"LOCKED\");\n    i0.ɵɵproperty(\"routerLink\", task_r3.status == \"LOCKED\" ? null : i0.ɵɵpureFunction1(9, _c0, task_r3.day));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r3.status == \"SOLVED\" && task_r3.solutionStatus == \"CORRECT\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r3.status == \"SOLVED\" && task_r3.solutionStatus == \"INCORRECT\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", task_r3.status == \"OPEN\" ? \"/assets/presents/presentToday.png\" : \"/assets/presents/present.png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r3.day);\n  }\n}\n\nexport let TasksComponent = /*#__PURE__*/(() => {\n  class TasksComponent {\n    constructor(remoteService) {\n      this.remoteService = remoteService;\n      this.tasks = [];\n      this.tasksInRandomOrder = [];\n    }\n\n    ngOnInit() {\n      this.remoteService.get(\"tasks\").subscribe(t => {\n        this.tasks = t; // eslint-disable-next-line no-use-before-define\n\n        this.tasksInRandomOrder = shuffle([...t]);\n      });\n    }\n\n  }\n\n  TasksComponent.ɵfac = function TasksComponent_Factory(t) {\n    return new (t || TasksComponent)(i0.ɵɵdirectiveInject(i1.RemoteService));\n  };\n\n  TasksComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TasksComponent,\n    selectors: [[\"app-tasks\"]],\n    decls: 25,\n    vars: 2,\n    consts: [[1, \"alert\", \"alert-info\", \"table-responsive\"], [1, \"table\"], [1, \"bg-success\", \"text-white\"], [1, \"bg-danger\", \"text-white\"], [1, \"bg-warning\"], [1, \"bg-light\"], [1, \"table-responsive\"], [3, \"text-white\", \"bg-success\", \"bg-danger\", \"bg-warning\", \"bg-light\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"day\", 3, \"cursor-normal\", 4, \"ngFor\", \"ngForOf\"], [1, \"clearfix\"], [1, \"day\"], [3, \"routerLink\"], [\"class\", \"overlay text-success fa-4x fas fa-check\", 4, \"ngIf\"], [\"class\", \"overlay text-danger fa-4x fas fa-times\", 4, \"ngIf\"], [1, \"present\", 3, \"src\"], [1, \"number\"], [1, \"overlay\", \"text-success\", \"fa-4x\", \"fas\", \"fa-check\"], [1, \"overlay\", \"text-danger\", \"fa-4x\", \"fas\", \"fa-times\"]],\n    template: function TasksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Bilderr\\u00E4tsel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"h4\");\n        i0.ɵɵtext(4, \"Farbcodes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"table\", 1)(6, \"tbody\")(7, \"tr\")(8, \"td\", 2);\n        i0.ɵɵtext(9, \"Richtig, volle Punkzahl\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"td\", 3);\n        i0.ɵɵtext(11, \"Falsch, keine Punkte\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"tr\")(13, \"td\", 4);\n        i0.ɵɵtext(14, \"Momentan zur Bearbeitung\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"td\", 5);\n        i0.ɵɵtext(16, \"Noch nicht freigeschaltet\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(17, \"div\", 6)(18, \"table\", 1)(19, \"tbody\")(20, \"tr\");\n        i0.ɵɵtemplate(21, TasksComponent_td_21_Template, 2, 11, \"td\", 7);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(22, \"div\");\n        i0.ɵɵtemplate(23, TasksComponent_div_23_Template, 7, 11, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"div\", 9);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasksInRandomOrder);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.RouterLinkWithHref],\n    styles: [\"div.day[_ngcontent-%COMP%]{display:inline-block;position:relative;padding:0;margin:0;text-align:center}div.day[_ngcontent-%COMP%]   p.number[_ngcontent-%COMP%]{position:absolute;inset:0;font-size:50px!important;color:#fff;text-align:center;vertical-align:middle;line-height:200px;text-shadow:0 0 5px black}div.day[_ngcontent-%COMP%]   .overlay[_ngcontent-%COMP%]{text-shadow:-3px 0 white,0 3px white,3px 0 white,0 -3px white;position:absolute;right:.5rem;bottom:-.5rem;z-index:4}\"]\n  });\n  /* taken from https://stackoverflow.com/a/2450976/13485777 */\n\n  return TasksComponent;\n})();\n\nfunction shuffle(array) {\n  let currentIndex = array.length;\n  let temporaryValue;\n  let randomIndex; // While there remain elements to shuffle...\n\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}","map":null,"metadata":{},"sourceType":"module"}