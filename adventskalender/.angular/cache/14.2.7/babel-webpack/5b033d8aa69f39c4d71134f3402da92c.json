{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { NoErrorHttpParams } from \"../_helpers/noErrorHttpParams\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./remote.service\";\nimport * as i2 from \"./storage.service\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(remoteService, storageService) {\n      this.remoteService = remoteService;\n      this.storageService = storageService;\n      this.onLogin = new Subject();\n    }\n\n    login(nickname, password) {\n      return this.remoteService.post(\"auth/login\", {\n        password,\n        nickname\n      }).pipe(map(user => {\n        // login successful if there's a jwt token in the response\n        this.onLoggedIn(user);\n        return user;\n      }));\n    }\n\n    isAdmin() {\n      var _a;\n\n      return !!((_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.isAdmin);\n    }\n\n    get loggedIn() {\n      return !!this.currentUser;\n    }\n\n    onLoggedIn(user) {\n      if (user) {\n        this.currentUser = user;\n        this.storageService.set(\"jwtToken\", user.jwtToken);\n        this.onLogin.next(true);\n      }\n    }\n\n    autoLogin(jwtToken) {\n      const o = new Subject();\n      this.remoteService.post(\"auth/renewToken\", {\n        jwtToken\n      }, {\n        params: new NoErrorHttpParams(true)\n      }).subscribe(data => {\n        if (data && data.user) {\n          this.onLoggedIn(data.user);\n          o.next(true);\n        } else {\n          o.next(false);\n        }\n      }, () => {\n        o.next(false);\n      });\n      return o;\n    }\n\n    logout() {\n      this.storageService.remove(\"jwtToken\");\n      window.location.reload();\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.RemoteService), i0.ɵɵinject(i2.StorageService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}