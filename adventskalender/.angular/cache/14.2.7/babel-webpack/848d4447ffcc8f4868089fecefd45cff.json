{"ast":null,"code":"import { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../_services/remote.service\";\nimport * as i2 from \"../../_services/authentication.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../_services/storage.service\";\nimport * as i5 from \"../../_services/alert.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\n\nfunction LoginComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" Die Passwort-Zur\\u00FCcksetzen Email wurde erfolgreich versendet. Bitte \\u00FCberpr\\u00FCfe Dein Postfach. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" Dein Passwort wurde erfolgreich ge\\u00E4ndert! Du kannst Dich nun wieder anmelden. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_div_1_form_7_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 19);\n  }\n}\n\nfunction LoginComponent_div_1_form_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_div_1_form_7_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 8)(2, \"label\", 9);\n    i0.ɵɵtext(3, \"Nickname\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 10);\n    i0.ɵɵelement(5, \"input\", 11);\n    i0.ɵɵelementStart(6, \"div\", 12);\n    i0.ɵɵtext(7, \"Dieses Feld muss ausgef\\u00FCllt werden!\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"div\", 8)(9, \"label\", 13);\n    i0.ɵɵtext(10, \"Passwort\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 10);\n    i0.ɵɵelement(12, \"input\", 14);\n    i0.ɵɵelementStart(13, \"div\", 12);\n    i0.ɵɵtext(14, \"Dieses Feld muss ausgef\\u00FCllt werden!\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"div\", 8)(16, \"div\", 15)(17, \"button\", 16);\n    i0.ɵɵtext(18, \"Einloggen \");\n    i0.ɵɵtemplate(19, LoginComponent_div_1_form_7_span_19_Template, 1, 0, \"span\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_1_form_7_Template_button_click_20_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      ctx_r10.action = \"resetPassword\";\n      $event.preventDefault();\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(21, \"Passwort vergessen\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r4.loginForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r4.submitted && ctx_r4.loginForm.controls.nickname.invalid)(\"is-valid\", ctx_r4.loginForm.controls.nickname.valid);\n    i0.ɵɵadvance(7);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r4.submitted && ctx_r4.loginForm.controls.password.invalid)(\"is-valid\", ctx_r4.loginForm.controls.password.valid);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.loading);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.loading);\n  }\n}\n\nfunction LoginComponent_div_1_form_8_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 19);\n  }\n}\n\nfunction LoginComponent_div_1_form_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_div_1_form_8_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onResetPasswordSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵtext(2, \" Bitte gib Deine Email Adresse ein. Du erh\\u00E4ltst dann eine Mail mit einem Link, \\u00FCber den Du Dein Passwort zur\\u00FCcksetzen kannst. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 8)(4, \"label\", 21);\n    i0.ɵɵtext(5, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 10);\n    i0.ɵɵelement(7, \"input\", 22);\n    i0.ɵɵelementStart(8, \"div\", 12);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 8)(11, \"div\", 15)(12, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_1_form_8_Template_button_click_12_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      ctx_r14.action = \"login\";\n      $event.preventDefault();\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(13, \"Zur\\u00FCck\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 24);\n    i0.ɵɵtext(15, \"Password zur\\u00FCcksetzen \");\n    i0.ɵɵtemplate(16, LoginComponent_div_1_form_8_span_16_Template, 1, 0, \"span\", 17);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r5.resetPasswordForm);\n    i0.ɵɵadvance(7);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r5.resetPasswordSubmitted && ctx_r5.resetPasswordForm.controls.email.invalid)(\"is-valid\", ctx_r5.resetPasswordForm.controls.email.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate((ctx_r5.resetPasswordForm.controls.email.errors == null ? null : ctx_r5.resetPasswordForm.controls.email.errors.required) ? \"Dieses Feld muss ausgef\\u00FCllt werden!\" : \"Bitte gib eine g\\u00FCltige Email-Adresse an!\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"disabled\", ctx_r5.loading);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.loading);\n  }\n}\n\nfunction LoginComponent_div_1_form_9_span_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 19);\n  }\n}\n\nfunction LoginComponent_div_1_form_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_div_1_form_9_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onNewPasswordSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵtext(2, \" Bitte gib nun ein neues Password ein. Merke es Dir dieses Mal gut! \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 25)(4, \"label\", 13);\n    i0.ɵɵtext(5, \"Passwort\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 10);\n    i0.ɵɵelement(7, \"input\", 26);\n    i0.ɵɵelementStart(8, \"div\", 27);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 28);\n    i0.ɵɵtext(11, \"Dein Passwort muss folgende Kriterien erf\\u00FCllen: \");\n    i0.ɵɵelementStart(12, \"ol\")(13, \"li\");\n    i0.ɵɵtext(14, \"mindestens 5 Zeichen\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"li\");\n    i0.ɵɵtext(16, \"mindestens 1 Kleinbuchstabe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"li\");\n    i0.ɵɵtext(18, \"mindestens 1 Gro\\u00DFbuchstabe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"li\");\n    i0.ɵɵtext(20, \"mindestens 1 Zahl\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(21, \" Merke es Dir gut und gib es nicht weiter! \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(22, \"div\", 25)(23, \"label\", 29);\n    i0.ɵɵtext(24, \"Passwort wiederholen\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 10);\n    i0.ɵɵelement(26, \"input\", 30);\n    i0.ɵɵelementStart(27, \"div\", 27);\n    i0.ɵɵtext(28, \"Dieses Feld muss ausgef\\u00FCllt werden!\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(29, \"div\", 8)(30, \"div\", 15)(31, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_1_form_9_Template_button_click_31_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      ctx_r18.action = \"login\";\n      $event.preventDefault();\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(32, \"Zur\\u00FCck\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"button\", 24);\n    i0.ɵɵtext(34, \"Password \\u00E4ndern \");\n    i0.ɵɵtemplate(35, LoginComponent_div_1_form_9_span_35_Template, 1, 0, \"span\", 17);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r6.newPasswordForm);\n    i0.ɵɵadvance(7);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r6.newPasswordSubmitted && ctx_r6.newPasswordForm.controls.password.invalid)(\"is-valid\", ctx_r6.newPasswordForm.controls.password.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate((ctx_r6.newPasswordForm.controls.password.errors == null ? null : ctx_r6.newPasswordForm.controls.password.errors.required) ? \"Dieses Feld muss ausgef\\u00FCllt werden!\" : (ctx_r6.newPasswordForm.controls.password.errors == null ? null : ctx_r6.newPasswordForm.controls.password.errors.minlength) ? \"Dein Passwort muss mindestens 5 Zeichen lang sein!\" : \"Dein Passwort muss mindestens einen Gro\\u00DF-, einen Kleinbuchstaben und eine Zahl enthalten!\");\n    i0.ɵɵadvance(17);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r6.newPasswordSubmitted && ctx_r6.newPasswordForm.controls.password2.invalid)(\"is-valid\", ctx_r6.newPasswordForm.controls.password2.valid);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"disabled\", ctx_r6.loading);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.loading);\n  }\n}\n\nfunction LoginComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"h3\");\n    i0.ɵɵtext(4, \"Jetzt einloggen!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, LoginComponent_div_1_div_5_Template, 2, 0, \"div\", 4);\n    i0.ɵɵtemplate(6, LoginComponent_div_1_div_6_Template, 2, 0, \"div\", 4);\n    i0.ɵɵtemplate(7, LoginComponent_div_1_form_7_Template, 22, 11, \"form\", 5);\n    i0.ɵɵtemplate(8, LoginComponent_div_1_form_8_Template, 17, 8, \"form\", 5);\n    i0.ɵɵtemplate(9, LoginComponent_div_1_form_9_Template, 36, 12, \"form\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"AGventskalender \", ctx_r1.year, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.passwordResetSuccessfull);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.passwordChangeSuccessfull);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.action == \"login\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.action == \"resetPassword\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.action == \"newPassword\");\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(remoteService, authenticationService, router, storageService, route, alertService) {\n      this.remoteService = remoteService;\n      this.authenticationService = authenticationService;\n      this.router = router;\n      this.storageService = storageService;\n      this.route = route;\n      this.alertService = alertService;\n      this.year = new Date().getFullYear();\n      this.submitted = false;\n      this.resetPasswordSubmitted = false;\n      this.newPasswordSubmitted = false;\n      this.loading = false;\n      this.tryingToAutoLogin = false;\n      this.action = \"login\";\n\n      if (this.route.snapshot.params.token) {\n        this.action = \"newPassword\";\n        this.resetToken = this.route.snapshot.params.token;\n      }\n\n      this.loginForm = new FormGroup({\n        nickname: new FormControl(\"\", [Validators.required]),\n        password: new FormControl(\"\", [Validators.required])\n      });\n      this.resetPasswordForm = new FormGroup({\n        email: new FormControl(\"\", [Validators.required, Validators.email])\n      });\n      this.newPasswordForm = new FormGroup({\n        password: new FormControl(\"\", [Validators.required, Validators.minLength(5), Validators.pattern(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])/)]),\n        password2: new FormControl(\"\", [Validators.required])\n      });\n      const jwtToken = this.storageService.get(\"jwtToken\");\n\n      if (jwtToken) {\n        this.tryingToAutoLogin = true;\n        this.authenticationService.autoLogin(jwtToken).subscribe(success => {\n          if (success) {\n            if (this.route.snapshot.queryParams.returnUrl) {\n              this.router.navigate([this.route.snapshot.queryParams.returnUrl]);\n            } else {\n              this.router.navigate([\"home\"]);\n            }\n          }\n\n          this.tryingToAutoLogin = false;\n        });\n      }\n    }\n\n    onSubmit() {\n      this.submitted = true;\n\n      if (this.loginForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.authenticationService.login(this.loginForm.controls.nickname.value, this.loginForm.controls.password.value).subscribe(() => {\n        this.loading = true;\n        this.submitted = false;\n        this.loggedInSuccessfully();\n      }, () => {\n        this.loading = false;\n      });\n    }\n\n    onResetPasswordSubmit() {\n      this.resetPasswordSubmitted = true;\n\n      if (this.resetPasswordForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.remoteService.post(\"auth/resetPassword\", {\n        email: this.resetPasswordForm.controls.email.value\n      }).subscribe(data => {\n        this.loading = false;\n\n        if (data && data.success) {\n          this.passwordResetSuccessfull = true;\n          this.action = \"login\";\n        }\n      }, () => {\n        this.loading = false;\n      });\n    }\n\n    onNewPasswordSubmit() {\n      this.newPasswordSubmitted = true;\n\n      if (this.newPasswordForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.remoteService.post(`auth/newPassword/${this.resetToken}`, {\n        password1: this.newPasswordForm.controls.password.value,\n        password2: this.newPasswordForm.controls.password2.value\n      }).subscribe(data => {\n        this.loading = false;\n\n        if (data && data.success) {\n          this.passwordChangeSuccessfull = true;\n          this.action = \"login\";\n        }\n      }, () => {\n        this.loading = false;\n      });\n    }\n\n    loggedInSuccessfully() {\n      this.loading = false;\n\n      if (this.route.snapshot.queryParams.returnUrl) {\n        this.router.navigate([this.route.snapshot.queryParams.returnUrl]);\n      } else {\n        this.router.navigate([\"welcome\"]);\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.RemoteService), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.StorageService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i5.AlertService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"d-flex justify-content-center autoLoginSpinner\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\", \"autoLoginSpinner\"], [1, \"spinner-border\", \"text-primary\"], [\"class\", \"alert alert-success\", 4, \"ngIf\"], [\"class\", \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"alert\", \"alert-success\"], [1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [\"for\", \"nickname\", 1, \"col-sm-2\", \"control-label\"], [1, \"col-sm-10\"], [\"type\", \"text\", \"id\", \"nickname\", \"required\", \"\", \"formControlName\", \"nickname\", \"autofocus\", \"\", \"value\", \"\", \"name\", \"nickname\", \"placeholder\", \"Nickname\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"password\", 1, \"col-sm-2\", \"control-label\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"required\", \"\", \"name\", \"password\", \"placeholder\", \"Passwort\", 1, \"form-control\"], [1, \"mx-auto\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mb-1\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"ml-4\", 3, \"click\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mb-1\"], [1, \"alert\", \"alert-primary\"], [\"for\", \"email\", 1, \"col-sm-2\", \"control-label\"], [\"type\", \"email\", \"id\", \"email\", \"required\", \"\", \"formControlName\", \"email\", \"autofocus\", \"\", \"name\", \"email\", \"placeholder\", \"Email-Adresse\", 1, \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ml-4\", 3, \"disabled\"], [1, \"forn-group\", \"row\"], [\"type\", \"password\", \"required\", \"\", \"id\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Passwort\", 1, \"form-control\"], [1, \"alert\", \"alert-danger\", \"my-0\", \"invalid-feedback\"], [1, \"alert\", \"alert-info\", \"text-left\"], [\"for\", \"password2\", 1, \"col-sm-2\", \"control-label\"], [\"type\", \"password\", \"required\", \"\", \"id\", \"password2\", \"name\", \"password2\", \"formControlName\", \"password2\", \"placeholder\", \"Passwort wiederholen\", 1, \"form-control\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 2, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, LoginComponent_div_1_Template, 10, 6, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.tryingToAutoLogin);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tryingToAutoLogin);\n      }\n    },\n    dependencies: [i6.NgIf, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.FormGroupDirective, i7.FormControlName]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}